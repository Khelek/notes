/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};exports.



























getNotesTree = getNotesTree;var /* istanbul ignore next */_immutable = require('immutable');function notesIterator(notes, note, counter, acc, noteCallback, childCallback) {var newCounter = counter;var res = noteCallback(note, counter, acc);var newAcc = res.acc;var newNote = res.note;if (!newNote.get('children') || newNote.get('children').count() <= 0) {return { counter: newCounter, acc: newAcc, note: newNote };}newNote = newNote.update('children', function (children) /* istanbul ignore next */{return children.map(function (childId, id) {var child = notes.getIn([childId.toString()]);if (childCallback) {child = childCallback(child, children, id, newCounter, acc); // callback
            }var expand = notesIterator(notes, child, newCounter + 1, newAcc, noteCallback, childCallback);newCounter = expand.counter;newAcc = /* istanbul ignore next */_extends(newAcc, expand.acc);return expand.note;});});return { counter: newCounter, note: res.note, acc: res.acc };}function getNotesTree(notes) {/* istanbul ignore next */var rootNote = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : notes.getIn(['0']);var childCallback = function childCallback(child, children, id, counter, acc) {
        var newChild = child.
        set('order', id).
        set('prevId', children.get((Number(id) - 1).toString()));
        return newChild;
    };
    var noteCallback = function noteCallback(note, counter, acc) {
        var newNote = note.set('globalOrder', counter);
        acc.notesOrder[counter] = note;
        return { note: newNote, acc: acc };
    };
    var startAcc = { notesOrder: {} }; /* istanbul ignore next */var _notesIterator =
    notesIterator(notes, rootNote, 0, startAcc,
    noteCallback, childCallback); /* istanbul ignore next */var counter = _notesIterator.counter; /* istanbul ignore next */var note = _notesIterator.note; /* istanbul ignore next */var acc = _notesIterator.acc;
    // console.log("notes", note.toJS());
    return { tree: note, order: /* istanbul ignore next */(0, _immutable.fromJS)(acc.notesOrder) };
}